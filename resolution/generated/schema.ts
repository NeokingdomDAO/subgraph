// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Resolution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isNegative", Value.fromBoolean(false));
    this.set("yesVotesTotal", Value.fromBigInt(BigInt.zero()));
    this.set("typeId", Value.fromBigInt(BigInt.zero()));
    this.set("approveTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("updateTimestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Resolution entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Resolution", id.toString(), this);
    }
  }

  static load(id: string): Resolution | null {
    return changetype<Resolution | null>(store.get("Resolution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get content(): string | null {
    let value = this.get("content");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set content(value: string | null) {
    if (!value) {
      this.unset("content");
    } else {
      this.set("content", Value.fromString(<string>value));
    }
  }

  get isNegative(): boolean {
    let value = this.get("isNegative");
    return value!.toBoolean();
  }

  set isNegative(value: boolean) {
    this.set("isNegative", Value.fromBoolean(value));
  }

  get yesVotesTotal(): BigInt {
    let value = this.get("yesVotesTotal");
    return value!.toBigInt();
  }

  set yesVotesTotal(value: BigInt) {
    this.set("yesVotesTotal", Value.fromBigInt(value));
  }

  get typeId(): BigInt {
    let value = this.get("typeId");
    return value!.toBigInt();
  }

  set typeId(value: BigInt) {
    this.set("typeId", Value.fromBigInt(value));
  }

  get approveTimestamp(): BigInt {
    let value = this.get("approveTimestamp");
    return value!.toBigInt();
  }

  set approveTimestamp(value: BigInt) {
    this.set("approveTimestamp", Value.fromBigInt(value));
  }

  get createTimestamp(): BigInt {
    let value = this.get("createTimestamp");
    return value!.toBigInt();
  }

  set createTimestamp(value: BigInt) {
    this.set("createTimestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    return value!.toBigInt();
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }
}
