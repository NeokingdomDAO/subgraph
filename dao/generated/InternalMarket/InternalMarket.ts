// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OfferCreated extends ethereum.Event {
  get params(): OfferCreated__Params {
    return new OfferCreated__Params(this);
  }
}

export class OfferCreated__Params {
  _event: OfferCreated;

  constructor(event: OfferCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get createdAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OfferMatched extends ethereum.Event {
  get params(): OfferMatched__Params {
    return new OfferMatched__Params(this);
  }
}

export class OfferMatched__Params {
  _event: OfferMatched;

  constructor(event: OfferMatched) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InternalMarket extends ethereum.SmartContract {
  static bind(address: Address): InternalMarket {
    return new InternalMarket("InternalMarket", address);
  }

  exchangeToken(): Address {
    let result = super.call("exchangeToken", "exchangeToken():(address)", []);

    return result[0].toAddress();
  }

  try_exchangeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangeToken",
      "exchangeToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoles(): Address {
    let result = super.call("getRoles", "getRoles():(address)", []);

    return result[0].toAddress();
  }

  try_getRoles(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRoles", "getRoles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  offerDuration(): BigInt {
    let result = super.call("offerDuration", "offerDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_offerDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offerDuration",
      "offerDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offeredBalanceOf(account: Address): BigInt {
    let result = super.call(
      "offeredBalanceOf",
      "offeredBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_offeredBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offeredBalanceOf",
      "offeredBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionController(): Address {
    let result = super.call(
      "redemptionController",
      "redemptionController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_redemptionController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "redemptionController",
      "redemptionController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenInternal(): Address {
    let result = super.call("tokenInternal", "tokenInternal():(address)", []);

    return result[0].toAddress();
  }

  try_tokenInternal(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenInternal",
      "tokenInternal():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawableBalanceOf(account: Address): BigInt {
    let result = super.call(
      "withdrawableBalanceOf",
      "withdrawableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_withdrawableBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableBalanceOf",
      "withdrawableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenInternal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }
}

export class MatchOfferCall extends ethereum.Call {
  get inputs(): MatchOfferCall__Inputs {
    return new MatchOfferCall__Inputs(this);
  }

  get outputs(): MatchOfferCall__Outputs {
    return new MatchOfferCall__Outputs(this);
  }
}

export class MatchOfferCall__Inputs {
  _call: MatchOfferCall;

  constructor(call: MatchOfferCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MatchOfferCall__Outputs {
  _call: MatchOfferCall;

  constructor(call: MatchOfferCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class SetExchangePairCall extends ethereum.Call {
  get inputs(): SetExchangePairCall__Inputs {
    return new SetExchangePairCall__Inputs(this);
  }

  get outputs(): SetExchangePairCall__Outputs {
    return new SetExchangePairCall__Outputs(this);
  }
}

export class SetExchangePairCall__Inputs {
  _call: SetExchangePairCall;

  constructor(call: SetExchangePairCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetExchangePairCall__Outputs {
  _call: SetExchangePairCall;

  constructor(call: SetExchangePairCall) {
    this._call = call;
  }
}

export class SetInternalTokenCall extends ethereum.Call {
  get inputs(): SetInternalTokenCall__Inputs {
    return new SetInternalTokenCall__Inputs(this);
  }

  get outputs(): SetInternalTokenCall__Outputs {
    return new SetInternalTokenCall__Outputs(this);
  }
}

export class SetInternalTokenCall__Inputs {
  _call: SetInternalTokenCall;

  constructor(call: SetInternalTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInternalTokenCall__Outputs {
  _call: SetInternalTokenCall;

  constructor(call: SetInternalTokenCall) {
    this._call = call;
  }
}

export class SetOfferDurationCall extends ethereum.Call {
  get inputs(): SetOfferDurationCall__Inputs {
    return new SetOfferDurationCall__Inputs(this);
  }

  get outputs(): SetOfferDurationCall__Outputs {
    return new SetOfferDurationCall__Outputs(this);
  }
}

export class SetOfferDurationCall__Inputs {
  _call: SetOfferDurationCall;

  constructor(call: SetOfferDurationCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOfferDurationCall__Outputs {
  _call: SetOfferDurationCall;

  constructor(call: SetOfferDurationCall) {
    this._call = call;
  }
}

export class SetRedemptionControllerCall extends ethereum.Call {
  get inputs(): SetRedemptionControllerCall__Inputs {
    return new SetRedemptionControllerCall__Inputs(this);
  }

  get outputs(): SetRedemptionControllerCall__Outputs {
    return new SetRedemptionControllerCall__Outputs(this);
  }
}

export class SetRedemptionControllerCall__Inputs {
  _call: SetRedemptionControllerCall;

  constructor(call: SetRedemptionControllerCall) {
    this._call = call;
  }

  get redemptionController_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRedemptionControllerCall__Outputs {
  _call: SetRedemptionControllerCall;

  constructor(call: SetRedemptionControllerCall) {
    this._call = call;
  }
}

export class SetReserveCall extends ethereum.Call {
  get inputs(): SetReserveCall__Inputs {
    return new SetReserveCall__Inputs(this);
  }

  get outputs(): SetReserveCall__Outputs {
    return new SetReserveCall__Outputs(this);
  }
}

export class SetReserveCall__Inputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }

  get reserve_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReserveCall__Outputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }
}

export class SetRolesCall extends ethereum.Call {
  get inputs(): SetRolesCall__Inputs {
    return new SetRolesCall__Inputs(this);
  }

  get outputs(): SetRolesCall__Outputs {
    return new SetRolesCall__Outputs(this);
  }
}

export class SetRolesCall__Inputs {
  _call: SetRolesCall;

  constructor(call: SetRolesCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRolesCall__Outputs {
  _call: SetRolesCall;

  constructor(call: SetRolesCall) {
    this._call = call;
  }
}

export class SetShareholderRegistryCall extends ethereum.Call {
  get inputs(): SetShareholderRegistryCall__Inputs {
    return new SetShareholderRegistryCall__Inputs(this);
  }

  get outputs(): SetShareholderRegistryCall__Outputs {
    return new SetShareholderRegistryCall__Outputs(this);
  }
}

export class SetShareholderRegistryCall__Inputs {
  _call: SetShareholderRegistryCall;

  constructor(call: SetShareholderRegistryCall) {
    this._call = call;
  }

  get shareholderRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetShareholderRegistryCall__Outputs {
  _call: SetShareholderRegistryCall;

  constructor(call: SetShareholderRegistryCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
