// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldVotingPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newVotingPower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Snapshot extends ethereum.Event {
  get params(): Snapshot__Params {
    return new Snapshot__Params(this);
  }
}

export class Snapshot__Params {
  _event: Snapshot;

  constructor(event: Snapshot) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Voting extends ethereum.SmartContract {
  static bind(address: Address): Voting {
    return new Voting("Voting", address);
  }

  canVote(account: Address): boolean {
    let result = super.call("canVote", "canVote(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_canVote(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("canVote", "canVote(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canVoteAt(account: Address, snapshotId: BigInt): boolean {
    let result = super.call("canVoteAt", "canVoteAt(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(snapshotId)
    ]);

    return result[0].toBoolean();
  }

  try_canVoteAt(
    account: Address,
    snapshotId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canVoteAt",
      "canVoteAt(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentSnapshotId(): BigInt {
    let result = super.call(
      "getCurrentSnapshotId",
      "getCurrentSnapshotId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentSnapshotId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSnapshotId",
      "getCurrentSnapshotId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelegate(account: Address): Address {
    let result = super.call("getDelegate", "getDelegate(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddress();
  }

  try_getDelegate(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegate",
      "getDelegate(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegateAt(account: Address, snapshotId: BigInt): Address {
    let result = super.call(
      "getDelegateAt",
      "getDelegateAt(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );

    return result[0].toAddress();
  }

  try_getDelegateAt(
    account: Address,
    snapshotId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegateAt",
      "getDelegateAt(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoles(): Address {
    let result = super.call("getRoles", "getRoles():(address)", []);

    return result[0].toAddress();
  }

  try_getRoles(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRoles", "getRoles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalVotingPower(): BigInt {
    let result = super.call(
      "getTotalVotingPower",
      "getTotalVotingPower():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalVotingPower(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVotingPower",
      "getTotalVotingPower():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalVotingPowerAt(snapshotId: BigInt): BigInt {
    let result = super.call(
      "getTotalVotingPowerAt",
      "getTotalVotingPowerAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(snapshotId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalVotingPowerAt(snapshotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVotingPowerAt",
      "getTotalVotingPowerAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(snapshotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingPower(account: Address): BigInt {
    let result = super.call(
      "getVotingPower",
      "getVotingPower(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getVotingPower(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPower",
      "getVotingPower(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingPowerAt(account: Address, snapshotId: BigInt): BigInt {
    let result = super.call(
      "getVotingPowerAt",
      "getVotingPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVotingPowerAt(
    account: Address,
    snapshotId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPowerAt",
      "getVotingPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snapshot(): BigInt {
    let result = super.call("snapshot", "snapshot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_snapshot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("snapshot", "snapshot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAddContributorCall extends ethereum.Call {
  get inputs(): AfterAddContributorCall__Inputs {
    return new AfterAddContributorCall__Inputs(this);
  }

  get outputs(): AfterAddContributorCall__Outputs {
    return new AfterAddContributorCall__Outputs(this);
  }
}

export class AfterAddContributorCall__Inputs {
  _call: AfterAddContributorCall;

  constructor(call: AfterAddContributorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AfterAddContributorCall__Outputs {
  _call: AfterAddContributorCall;

  constructor(call: AfterAddContributorCall) {
    this._call = call;
  }
}

export class AfterTokenTransferCall extends ethereum.Call {
  get inputs(): AfterTokenTransferCall__Inputs {
    return new AfterTokenTransferCall__Inputs(this);
  }

  get outputs(): AfterTokenTransferCall__Outputs {
    return new AfterTokenTransferCall__Outputs(this);
  }
}

export class AfterTokenTransferCall__Inputs {
  _call: AfterTokenTransferCall;

  constructor(call: AfterTokenTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AfterTokenTransferCall__Outputs {
  _call: AfterTokenTransferCall;

  constructor(call: AfterTokenTransferCall) {
    this._call = call;
  }
}

export class BeforeRemoveContributorCall extends ethereum.Call {
  get inputs(): BeforeRemoveContributorCall__Inputs {
    return new BeforeRemoveContributorCall__Inputs(this);
  }

  get outputs(): BeforeRemoveContributorCall__Outputs {
    return new BeforeRemoveContributorCall__Outputs(this);
  }
}

export class BeforeRemoveContributorCall__Inputs {
  _call: BeforeRemoveContributorCall;

  constructor(call: BeforeRemoveContributorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BeforeRemoveContributorCall__Outputs {
  _call: BeforeRemoveContributorCall;

  constructor(call: BeforeRemoveContributorCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get newDelegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateFromCall extends ethereum.Call {
  get inputs(): DelegateFromCall__Inputs {
    return new DelegateFromCall__Inputs(this);
  }

  get outputs(): DelegateFromCall__Outputs {
    return new DelegateFromCall__Outputs(this);
  }
}

export class DelegateFromCall__Inputs {
  _call: DelegateFromCall;

  constructor(call: DelegateFromCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newDelegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DelegateFromCall__Outputs {
  _call: DelegateFromCall;

  constructor(call: DelegateFromCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetRolesCall extends ethereum.Call {
  get inputs(): SetRolesCall__Inputs {
    return new SetRolesCall__Inputs(this);
  }

  get outputs(): SetRolesCall__Outputs {
    return new SetRolesCall__Outputs(this);
  }
}

export class SetRolesCall__Inputs {
  _call: SetRolesCall;

  constructor(call: SetRolesCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRolesCall__Outputs {
  _call: SetRolesCall;

  constructor(call: SetRolesCall) {
    this._call = call;
  }
}

export class SetShareholderRegistryCall extends ethereum.Call {
  get inputs(): SetShareholderRegistryCall__Inputs {
    return new SetShareholderRegistryCall__Inputs(this);
  }

  get outputs(): SetShareholderRegistryCall__Outputs {
    return new SetShareholderRegistryCall__Outputs(this);
  }
}

export class SetShareholderRegistryCall__Inputs {
  _call: SetShareholderRegistryCall;

  constructor(call: SetShareholderRegistryCall) {
    this._call = call;
  }

  get shareholderRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetShareholderRegistryCall__Outputs {
  _call: SetShareholderRegistryCall;

  constructor(call: SetShareholderRegistryCall) {
    this._call = call;
  }
}

export class SetTokenCall extends ethereum.Call {
  get inputs(): SetTokenCall__Inputs {
    return new SetTokenCall__Inputs(this);
  }

  get outputs(): SetTokenCall__Outputs {
    return new SetTokenCall__Outputs(this);
  }
}

export class SetTokenCall__Inputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenCall__Outputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }
}

export class SnapshotCall extends ethereum.Call {
  get inputs(): SnapshotCall__Inputs {
    return new SnapshotCall__Inputs(this);
  }

  get outputs(): SnapshotCall__Outputs {
    return new SnapshotCall__Outputs(this);
  }
}

export class SnapshotCall__Inputs {
  _call: SnapshotCall;

  constructor(call: SnapshotCall) {
    this._call = call;
  }
}

export class SnapshotCall__Outputs {
  _call: SnapshotCall;

  constructor(call: SnapshotCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
