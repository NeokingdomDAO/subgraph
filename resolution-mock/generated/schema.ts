// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DelegateLostVotingPower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("resolutionId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DelegateLostVotingPower entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DelegateLostVotingPower entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DelegateLostVotingPower", id.toString(), this);
    }
  }

  static load(id: string): DelegateLostVotingPower | null {
    return changetype<DelegateLostVotingPower | null>(
      store.get("DelegateLostVotingPower", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get resolutionId(): BigInt {
    let value = this.get("resolutionId");
    return value!.toBigInt();
  }

  set resolutionId(value: BigInt) {
    this.set("resolutionId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ResolutionApproved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("resolutionId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResolutionApproved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResolutionApproved entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResolutionApproved", id.toString(), this);
    }
  }

  static load(id: string): ResolutionApproved | null {
    return changetype<ResolutionApproved | null>(
      store.get("ResolutionApproved", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get resolutionId(): BigInt {
    let value = this.get("resolutionId");
    return value!.toBigInt();
  }

  set resolutionId(value: BigInt) {
    this.set("resolutionId", Value.fromBigInt(value));
  }
}

export class ResolutionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("resolutionId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResolutionCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResolutionCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResolutionCreated", id.toString(), this);
    }
  }

  static load(id: string): ResolutionCreated | null {
    return changetype<ResolutionCreated | null>(
      store.get("ResolutionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get resolutionId(): BigInt {
    let value = this.get("resolutionId");
    return value!.toBigInt();
  }

  set resolutionId(value: BigInt) {
    this.set("resolutionId", Value.fromBigInt(value));
  }
}

export class ResolutionUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("resolutionId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResolutionUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResolutionUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResolutionUpdated", id.toString(), this);
    }
  }

  static load(id: string): ResolutionUpdated | null {
    return changetype<ResolutionUpdated | null>(
      store.get("ResolutionUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get resolutionId(): BigInt {
    let value = this.get("resolutionId");
    return value!.toBigInt();
  }

  set resolutionId(value: BigInt) {
    this.set("resolutionId", Value.fromBigInt(value));
  }
}

export class ResolutionVoted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("resolutionId", Value.fromBigInt(BigInt.zero()));
    this.set("votingPower", Value.fromBigInt(BigInt.zero()));
    this.set("isYes", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResolutionVoted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResolutionVoted entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResolutionVoted", id.toString(), this);
    }
  }

  static load(id: string): ResolutionVoted | null {
    return changetype<ResolutionVoted | null>(store.get("ResolutionVoted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get resolutionId(): BigInt {
    let value = this.get("resolutionId");
    return value!.toBigInt();
  }

  set resolutionId(value: BigInt) {
    this.set("resolutionId", Value.fromBigInt(value));
  }

  get votingPower(): BigInt {
    let value = this.get("votingPower");
    return value!.toBigInt();
  }

  set votingPower(value: BigInt) {
    this.set("votingPower", Value.fromBigInt(value));
  }

  get isYes(): boolean {
    let value = this.get("isYes");
    return value!.toBoolean();
  }

  set isYes(value: boolean) {
    this.set("isYes", Value.fromBoolean(value));
  }
}
