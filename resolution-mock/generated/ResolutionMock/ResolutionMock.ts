// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelegateLostVotingPower extends ethereum.Event {
  get params(): DelegateLostVotingPower__Params {
    return new DelegateLostVotingPower__Params(this);
  }
}

export class DelegateLostVotingPower__Params {
  _event: DelegateLostVotingPower;

  constructor(event: DelegateLostVotingPower) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resolutionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ResolutionApproved extends ethereum.Event {
  get params(): ResolutionApproved__Params {
    return new ResolutionApproved__Params(this);
  }
}

export class ResolutionApproved__Params {
  _event: ResolutionApproved;

  constructor(event: ResolutionApproved) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resolutionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ResolutionCreated extends ethereum.Event {
  get params(): ResolutionCreated__Params {
    return new ResolutionCreated__Params(this);
  }
}

export class ResolutionCreated__Params {
  _event: ResolutionCreated;

  constructor(event: ResolutionCreated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resolutionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ResolutionUpdated extends ethereum.Event {
  get params(): ResolutionUpdated__Params {
    return new ResolutionUpdated__Params(this);
  }
}

export class ResolutionUpdated__Params {
  _event: ResolutionUpdated;

  constructor(event: ResolutionUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resolutionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ResolutionVoted extends ethereum.Event {
  get params(): ResolutionVoted__Params {
    return new ResolutionVoted__Params(this);
  }
}

export class ResolutionVoted__Params {
  _event: ResolutionVoted;

  constructor(event: ResolutionVoted) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resolutionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votingPower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isYes(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class ResolutionMock__resolutionTypesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class ResolutionMock__resolutionsResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;
  value7: boolean;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }
}

export class ResolutionMock extends ethereum.SmartContract {
  static bind(address: Address): ResolutionMock {
    return new ResolutionMock("ResolutionMock", address);
  }

  createResolution(
    resolutionId: BigInt,
    dataURI: string,
    resolutionTypeId: BigInt,
    isNegative: boolean
  ): BigInt {
    let result = super.call(
      "createResolution",
      "createResolution(uint256,string,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(resolutionId),
        ethereum.Value.fromString(dataURI),
        ethereum.Value.fromUnsignedBigInt(resolutionTypeId),
        ethereum.Value.fromBoolean(isNegative)
      ]
    );

    return result[0].toBigInt();
  }

  try_createResolution(
    resolutionId: BigInt,
    dataURI: string,
    resolutionTypeId: BigInt,
    isNegative: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createResolution",
      "createResolution(uint256,string,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(resolutionId),
        ethereum.Value.fromString(dataURI),
        ethereum.Value.fromUnsignedBigInt(resolutionTypeId),
        ethereum.Value.fromBoolean(isNegative)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resolutionTypes(param0: BigInt): ResolutionMock__resolutionTypesResult {
    let result = super.call(
      "resolutionTypes",
      "resolutionTypes(uint256):(string,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ResolutionMock__resolutionTypesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_resolutionTypes(
    param0: BigInt
  ): ethereum.CallResult<ResolutionMock__resolutionTypesResult> {
    let result = super.tryCall(
      "resolutionTypes",
      "resolutionTypes(uint256):(string,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ResolutionMock__resolutionTypesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  resolutions(param0: BigInt): ResolutionMock__resolutionsResult {
    let result = super.call(
      "resolutions",
      "resolutions(uint256):(string,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ResolutionMock__resolutionsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean(),
      result[7].toBoolean()
    );
  }

  try_resolutions(
    param0: BigInt
  ): ethereum.CallResult<ResolutionMock__resolutionsResult> {
    let result = super.tryCall(
      "resolutions",
      "resolutions(uint256):(string,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ResolutionMock__resolutionsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean(),
        value[7].toBoolean()
      )
    );
  }

  snapshotAll(): BigInt {
    let result = super.call("snapshotAll", "snapshotAll():(uint256)", []);

    return result[0].toBigInt();
  }

  try_snapshotAll(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("snapshotAll", "snapshotAll():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveResolutionCall extends ethereum.Call {
  get inputs(): ApproveResolutionCall__Inputs {
    return new ApproveResolutionCall__Inputs(this);
  }

  get outputs(): ApproveResolutionCall__Outputs {
    return new ApproveResolutionCall__Outputs(this);
  }
}

export class ApproveResolutionCall__Inputs {
  _call: ApproveResolutionCall;

  constructor(call: ApproveResolutionCall) {
    this._call = call;
  }

  get resolutionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveResolutionCall__Outputs {
  _call: ApproveResolutionCall;

  constructor(call: ApproveResolutionCall) {
    this._call = call;
  }
}

export class CreateResolutionCall extends ethereum.Call {
  get inputs(): CreateResolutionCall__Inputs {
    return new CreateResolutionCall__Inputs(this);
  }

  get outputs(): CreateResolutionCall__Outputs {
    return new CreateResolutionCall__Outputs(this);
  }
}

export class CreateResolutionCall__Inputs {
  _call: CreateResolutionCall;

  constructor(call: CreateResolutionCall) {
    this._call = call;
  }

  get resolutionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dataURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get resolutionTypeId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isNegative(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CreateResolutionCall__Outputs {
  _call: CreateResolutionCall;

  constructor(call: CreateResolutionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SnapshotAllCall extends ethereum.Call {
  get inputs(): SnapshotAllCall__Inputs {
    return new SnapshotAllCall__Inputs(this);
  }

  get outputs(): SnapshotAllCall__Outputs {
    return new SnapshotAllCall__Outputs(this);
  }
}

export class SnapshotAllCall__Inputs {
  _call: SnapshotAllCall;

  constructor(call: SnapshotAllCall) {
    this._call = call;
  }
}

export class SnapshotAllCall__Outputs {
  _call: SnapshotAllCall;

  constructor(call: SnapshotAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateResolutionCall extends ethereum.Call {
  get inputs(): UpdateResolutionCall__Inputs {
    return new UpdateResolutionCall__Inputs(this);
  }

  get outputs(): UpdateResolutionCall__Outputs {
    return new UpdateResolutionCall__Outputs(this);
  }
}

export class UpdateResolutionCall__Inputs {
  _call: UpdateResolutionCall;

  constructor(call: UpdateResolutionCall) {
    this._call = call;
  }

  get resolutionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dataURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get resolutionTypeId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateResolutionCall__Outputs {
  _call: UpdateResolutionCall;

  constructor(call: UpdateResolutionCall) {
    this._call = call;
  }
}
